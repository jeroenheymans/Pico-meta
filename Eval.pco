`*-----------------------------------*`
`*             >>>Pico<<<            *`
`*            Theo D'Hondt           *`
`*  VUB Programming Technology Lab   *`
`*              (c)1997              *`
`*-----------------------------------*`
{ eval(Exp):
    error('evaluator not initialized');
  eval_main(Exp):
    error('evaluator not initialized');
        
  init_eval(Dct):
    { DCT: Dct;
      eval_counter: 0;
      eval_maximum: 6;
      eval_thread_expression: void;
      thread_main_name: "main";
      thread_exit: void;
      scheduler_exit: void;
      scheduler_start: void;
      scheduler_main: void;
      scheduler_continuation: void;
      scheduler_result: void;

      old_error: error;
      `error@list:= scheduler_exit(old_error@list);`

      eval_variable(Exp):
        { nam: Exp[VAR_NAM_idx];
          get(nam, DCT) };

      call_function(Exp, Dct):
        { dct: DCT;
          DCT:= Dct;
          val: eval(Exp);
          DCT:= dct;
          val };

      bind_variable(Exp, Var, Dct):
        { nam: Var[VAR_NAM_idx];
          val: eval(Exp);
          add(nam, val, Dct) };

      bind_application(Exp, Apl, Dct):
        { nam: Apl[APL_NAM_idx];
          arg: Apl[APL_ARG_idx]; 
          fun: FUN(nam, arg, Exp, DCT);
          add(nam, fun, Dct) };

      bind_error(Tab, Err, Dct):
        error('illegal parameter');
   
      bind_case: case(VAR_tag => bind_variable,
                      APL_tag => bind_application,
                         else => bind_error);
  
      call_table(TbA, TbP, Dct):
        { tbA: TbA[TAB_TAB_idx];
          tbP: TbP[TAB_TAB_idx];
          siz: size(tbA);
          if(siz = size(tbP),
             for(k: 1, k:= k+1, not(k > siz),
                 { arg: tbA[k];
                   par: tbP[k];
                   tag: par[TAG_idx];
                   cas: bind_case(tag);
                   Dct:= cas(arg, par, Dct) }),
             error('Illegal argument count'));
          Dct };

      call_variable(Tab, Var, Dct):
        { nam: Var[VAR_NAM_idx];
          tab: Tab[TAB_TAB_idx];
          siz: size(tab);
          exp: if(siz > 0,
                  { idx: 0;
                    arg[siz]: eval(tab[idx: idx+1]);
                    TAB(arg) },
                  Empty);
          add(nam, exp, Dct) };
   
      call_error(Tab, Apl, Dct):
        error('illegal parameter');
   
      call_case: case(TAB_tag => call_table,
                      VAR_tag => call_variable,
                         else => call_error);
  
      eval_call(Fun, Tab):
        { par: Fun[FUN_PAR_idx];
          exp: Fun[FUN_EXP_idx];
          dct: Fun[FUN_DCT_idx];
          tag: par[TAG_idx];
          cas: call_case(tag);
          dct:= cas(Tab, par, dct);
          call_function(exp, dct) };

      eval_application(Exp):
        { nam: Exp[APL_NAM_idx];
          arg: Exp[APL_ARG_idx];
          exp: get(nam, DCT);
          if(exp[TAG_idx] = FUN_tag,
             if(arg[TAG_idx] = TAB_tag,
                eval_call(exp, arg),
                { val: eval(arg);
                  if(val[TAG_idx] = TAB_tag,
                     eval_call(exp, val),
                     error('illegal argument')) }),
             if(exp[TAG_idx] = NAT_tag,
                { nat: exp[NAT_NAT_idx]; 
                  nat@arg },
                error('(native) function required'))) };

      eval_tabulation(Exp):
        { nam: Exp[TBL_NAM_idx];
          exp: get(nam, DCT);
          if(exp[TAG_idx] = TAB_tag,
             { idx: Exp[TBL_IDX_idx];
               val: eval(idx);
               if(val[TAG_idx] = NBR_tag,
                  { nbr: val[NBR_VAL_idx];
                    if(nbr > 0, 
                       { tab: exp[TAB_TAB_idx];
                         if(nbr > size(tab),
                            error('index beyond size'),
                            tab[nbr]) },
                       error('non-positive index')) },
                  error('invalid index')) },
             error('table required')) };

      define_variable(Var, Exp):
        { nam: Var[VAR_NAM_idx];
          val: eval(Exp);
          DCT:= add(nam, val, DCT);
          val };
    
      define_application(Apl, Exp):
        { nam: Apl[APL_NAM_idx];
          arg: Apl[APL_ARG_idx];
          DCT:= add(nam, Void, DCT);
          fun: FUN(nam, arg, Exp, DCT);
          set(nam, fun, DCT);
          fun };
    
      define_tabulation(Tbl, Exp):
        { nam: Tbl[TBL_NAM_idx];
          idx: Tbl[TBL_IDX_idx];
          val: eval(idx);
          if(val[TAG_idx] = NBR_tag,
             { nbr: val[NBR_VAL_idx];
               if(nbr < 0,
                  error('negative size'),
                  { exp: if(nbr > 0,
                            { tab[nbr]: eval(Exp);
                              TAB(tab) },
                            Empty );
                    DCT:= add(nam, exp, DCT);
                    exp }) },
             error('invalid size')) }; 
   
      define_error(Inv, Exp):
         error('invocation required');
  
      define_case: case(VAR_tag => define_variable,
                        APL_tag => define_application,
                        TBL_tag => define_tabulation,
                           else => define_error);
  
      eval_definition(Exp):
        { inv: Exp[DEF_INV_idx];
          exp: Exp[DEF_EXP_idx];
          tag: inv[TAG_idx];
          cas: define_case(tag);
          cas(inv, exp) };

      assign_variable(Var, Exp):
        { nam: Var[VAR_NAM_idx];
          val: eval(Exp);
          set(nam, val, DCT);
          val };
    
      assign_application(Apl, Exp):
        { nam: Apl[APL_NAM_idx];
          arg: Apl[APL_ARG_idx];
          fun: FUN(nam, arg, Exp, DCT);
          set(nam, fun, DCT);
          fun };
    
      assign_tabulation(Tbl, Exp):
        { nam: Tbl[TBL_NAM_idx];
          exp: get(nam, DCT);
          if(exp[TAG_idx] = TAB_tag,
             { idx: Tbl[TBL_IDX_idx];
               val: eval(idx);
               if(val[TAG_idx] = NBR_tag,
                  { nbr: val[NBR_VAL_idx];
                    if(nbr > 0, 
                       { tab: exp[TAB_TAB_idx];
                         if(nbr > size(tab),
                            error('index beyond size'),
                            { tab[nbr]:= eval(Exp);
                              exp }) },
                       error('non-positive index')) },
                  error('invalid index')) },
             error('table required')) };
   
      assign_error(Inv, Exp):
         error('invocation required');
  
      assign_case: case(VAR_tag => assign_variable,
                        APL_tag => assign_application,
                        TBL_tag => assign_tabulation,
                           else => assign_error);
  
      eval_assignment(Exp):
        { inv: Exp[SET_INV_idx];
          exp: Exp[SET_EXP_idx];
          tag: inv[TAG_idx];
          cas: assign_case(tag);
          cas(inv, exp) };

      eval_thread(thr):
        { tid: TID(Void);
          nth: THR(tid, thr[THR_EXP_idx], DCT);
          scheduler_add(nth, tid);
          tid };

      ` Evaluate a thread answer `
      eval_thread_answer(tha):
        { inv: tha[THA_INV_idx];
          tid: eval(inv);
          if(not(tid[TAG_idx] = TID_tag), `the thread we want to answer doesn't exist`
            tid,
            { sch: scheduler_find(tid);
              thr: sch[SCH_THR_idx];
              thq: void;
              while(or(is_void(thr[THR_BUF_idx]), `wait for the thread with the question to ask`
                       not({ thq:= thr[THR_BUF_idx];
                             thq[TAG_idx] = THQ_tag })), thread_exit());
              cur_tid: { tmp: scheduler_current[SCH_THR_idx]; tmp:= tmp[THR_TID_idx]; tmp[NBR_VAL_idx] };
              thq_tid: { tmp: thq[THQ_INV_idx]; tmp:= tmp[TID_TID_idx]; tmp[NBR_VAL_idx] };
              if(not(cur_tid = thq_tid), `the waiting thread is not waiting for us`
                tid, 
                { nam: tha[THA_NAM_idx];
                  thq_nam: thq[THQ_NAM_idx];
                  if(not(thq_nam = nam), `is the message the same?`
                    tid,
                    { arg: { tmp: tha[THA_ARG_idx]; tmp[TAB_TAB_idx] };
                      siz: size(arg);
                      new_tab[(idx: 0) + siz]: eval(arg[idx:= idx+1]);
                      new_arg: TAB(new_tab);
                      new_tha: THA(inv, nam, new_arg);
                      thr[THR_BUF_idx]:= new_tha;
                      tid }) }) }) };

      ` Evaluate a thread question
        After the thread is defined, we wait for an answer
        When the answer is given, we simply take the arguments and bind them `
      eval_thread_question(thq):
        { inv: thq[THQ_INV_idx];
          tid: void; 
          while({ tid:= eval(inv); not(tid[TAG_idx] = TID_tag) }, thread_exit());
          thq:= THQ(tid, thq[THQ_NAM_idx], thq[THQ_ARG_idx]);
          cur: scheduler_current[SCH_THR_idx];
          cur[THR_BUF_idx]:= thq;
          answer: void;
          while({ answer:= cur[THR_BUF_idx]; not(answer[TAG_idx] = THA_tag) }, thread_exit());
          parameters: { tmp: thq[THQ_ARG_idx]; tmp[TAB_TAB_idx] };
          arguments: { tmp: answer[THA_ARG_idx]; tmp[TAB_TAB_idx] };
          siz: size(arguments);
          while(siz > 0,
            { set: SET(parameters[siz], arguments[siz]);
              eval_assignment(set);
              siz:= siz-1 });
          cur[THR_BUF_idx]:= void;
          tid };
    
      eval_identity(Exp):
        Exp;
    
      eval_case: case(VAR_tag => eval_variable,
                      APL_tag => eval_application,
                      TBL_tag => eval_tabulation,
                      DEF_tag => eval_definition,
                      SET_tag => eval_assignment,
                      THR_tag => eval_thread,
                      THA_tag => eval_thread_answer,
                      THQ_tag => eval_thread_question,
                         else => eval_identity);
  
      init_eval(Dct):=
        { DCT:= Dct;
          void };

      ` Start the scheduler. As long as there is no result, keep on
        evaluating. Switching from thread is done in eval_thread_expression `
      scheduler_start():=
        { while(is_void(scheduler_result),
            { scn: scheduler_next();
              nxt: scn[SCH_THR_idx];
              scheduler_set_current(scn);
              call(
                { scheduler_continuation:= cont;
                  exp: nxt[THR_EXP_idx];
                  cnt: nxt[THR_CNT_idx];
                  DCT:= nxt[THR_DCT_idx];
                  if(is_void(cnt),
                    eval_thread_expression(exp),
                    continue(cnt, cnt)) }) });
          scheduler_result };

      ` Exit the scheduler completely `
      scheduler_exit(Result):=
        { scheduler_result:= Result;
          continue(scheduler_continuation, scheduler_continuation) };

      ` Save the current contination and continue the scheduler's one `
      thread_exit():=
        { thr: scheduler_current[SCH_THR_idx];
          thr[THR_DCT_idx]:= DCT;
          call(
            { thr[THR_CNT_idx]:= cont;
              continue(scheduler_continuation, scheduler_continuation) }) };

      ` Evaluation of an expression. If we reached maximum evaluated
        expressions in a thread, we switch to another thread `
      eval(Exp):=
        { if(scheduler_is_current_set(),
            if(not(eval_counter < eval_maximum),
              { eval_counter:= 0;
                thread_exit() },
              eval_counter:= eval_counter+1), void);
          tag: Exp[TAG_idx];
          cas: eval_case(tag);
          cas(Exp) };

      ` Start the evaluation of a thread. If it's the main thread,
        we make sure it will only be evaluated once `
      eval_thread_expression(Exp):=
        { thr: scheduler_current[SCH_THR_idx];
          main: scheduler_main[SCH_THR_idx];
          if(equivalent(thr, main),
            scheduler_exit(eval(Exp)),
            while(true, eval(Exp))) };

      ` Gets called when a new expression is inputted. It adds
        the expression to a main-thread and starts the scheduler `
      eval_main(Exp):=
        { thr: THR(void, Exp, void);
          tid: TID(void);
          scheduler_init();
          scheduler_main:= scheduler_add(thr, tid);
          DCT:= add(thread_main_name, tid, DCT);
          thr[THR_DCT_idx]:= DCT;
          scheduler_start() };
  
      void };

  display('evaluator installed', eoln) }

